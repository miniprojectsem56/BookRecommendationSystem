# -*- coding: utf-8 -*-
"""miniProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SFp3O2AgT6wVLJQXBKP-bayT6Q7KRfAD
"""

#Description: Build a book recommendation system

import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import  CountVectorizer

#Load the data
from google.colab import  files
files.upload()

#store the data
df = pd.read_csv('books - books.csv',encoding='unicode_escape',error_bad_lines=False)

#show the data
df

#Create a list of columns to keep
columns=['title','authors','publisher']

#Now I am creating the function to combine the important columns/features
def combine_features(data):
  features=[]
  for i in range(0,data.shape[0]):
    features.append(data['title'][i]+' '+data['authors'][i]+' '+data['publisher'][i])

  return features

#Create a column to store the combined features
df['combined_features']=combine_features(df)
#Show the data
df

#convert the text from the new column to a matrix of word counts
cm = CountVectorizer().fit_transform(df['combined_features'])

#Get the cosine similarity matrix from the count matrix
cs = cosine_similarity(cm)
#Print the scores
print(cs)

#Get the title of the book the reader likes
Title=df['title'][1]
#Show the title
Title

#Find the book id of the book that the user likes
bookID = df[df.title == Title]['bookID'].values[0]
#Show the bookID
bookID

#Create a list of tuples in the form (bookID,similarity score) 
scores=list(enumerate(cs[bookID]))
print(scores)

#sort the list of similar books in descending order
sorted_scores=sorted(scores,key=lambda x:x[1],reverse=True)
sorted_scores=sorted_scores[1:]
#Show the sorted scores
sorted_scores

#Create a loop to print the first 5 books from the sorted list
j=0
print('The 5 most recommended books to '+Title+' are:\n')
for item in sorted_scores:
  book_title=df[df.bookID==item[0]]['title'].values[0]
  print(j+1,book_title)
  j=j+1
  if j>=5:
    break